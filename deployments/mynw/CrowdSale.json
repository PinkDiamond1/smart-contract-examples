{
  "address": "0x55B8A0Fc6F96Ce9056E65A60100f39645F043Cb4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startAt",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "endAt",
          "type": "uint32"
        }
      ],
      "name": "Launch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pledge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unpledge",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaigns",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pledged",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startAt",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endAt",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_startAt",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_endAt",
          "type": "uint32"
        }
      ],
      "name": "launch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "pledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pledgedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unpledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ac3b9256b031da2c338a618021546ed56e5a1af30e240db9b110a33b86b6cd4",
  "receipt": {
    "to": null,
    "from": "0x5fe9dD4c80ab7742B62Fb40CE1fBE37D226645A1",
    "contractAddress": "0x55B8A0Fc6F96Ce9056E65A60100f39645F043Cb4",
    "transactionIndex": 0,
    "gasUsed": "841990",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6b32494b7b31ed619ba37bd90a8284d0ba4f46102d6ea3de224312497ea68278",
    "transactionHash": "0x9ac3b9256b031da2c338a618021546ed56e5a1af30e240db9b110a33b86b6cd4",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "841990",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5e9ee3B23C533FDA7bCfBECABD1E0e5e91098210"
  ],
  "numDeployments": 1,
  "solcInputHash": "93bdd931c054f096bc816c2ce1ed04fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startAt\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"}],\"name\":\"Launch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unpledge\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledged\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endAt\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endAt\",\"type\":\"uint32\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledgedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unpledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFund.sol\":\"CrowdSale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CrowdFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// source https://solidity-by-example.org/app/crowd-fund/\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\ncontract CrowdSale {\\n    event Launch(\\n        uint id,\\n        address indexed creator,\\n        uint goal,\\n        uint32 startAt,\\n        uint32 endAt\\n    );\\n    event Cancel(uint id);\\n    event Pledge(uint indexed id, address indexed caller, uint amount);\\n    event Unpledge(uint indexed id, address indexed caller, uint amount);\\n    event Claim(uint id);\\n    event Refund(uint id, address indexed caller, uint amount);\\n\\n    struct Campaign {\\n        // Creator of campaign\\n        address creator;\\n        // Amount of tokens to raise\\n        uint goal;\\n        // Total amount pledged\\n        uint pledged;\\n        // Timestamp of start of campaign\\n        uint32 startAt;\\n        // Timestamp of end of campaign\\n        uint32 endAt;\\n        // True if goal was reached and creator has claimed the tokens.\\n        bool claimed;\\n    }\\n\\n    IERC20 public immutable token;\\n    // Total count of campaigns created.\\n    // It is also used to generate id for new campaigns.\\n    uint public count;\\n    // Mapping from id to Campaign\\n    mapping(uint => Campaign) public campaigns;\\n    // Mapping from campaign id => pledger => amount pledged\\n    mapping(uint => mapping(address => uint)) public pledgedAmount;\\n\\n    constructor(address _token) {\\n        token = IERC20(_token);\\n    }\\n\\n    function launch(uint _goal, uint32 _startAt, uint32 _endAt) external {\\n        require(_startAt >= block.timestamp, \\\"start at < now\\\");\\n        require(_endAt >= _startAt, \\\"end at < start at\\\");\\n        require(_endAt <= block.timestamp + 90 days, \\\"end at > max duration\\\");\\n\\n        count += 1;\\n        campaigns[count] = Campaign({\\n        creator: msg.sender,\\n        goal: _goal,\\n        pledged: 0,\\n        startAt: _startAt,\\n        endAt: _endAt,\\n        claimed: false\\n        });\\n\\n        emit Launch(count, msg.sender, _goal, _startAt, _endAt);\\n    }\\n\\n    function cancel(uint _id) external {\\n        Campaign memory campaign = campaigns[_id];\\n        require(campaign.creator == msg.sender, \\\"not creator\\\");\\n        require(block.timestamp < campaign.startAt, \\\"started\\\");\\n\\n        delete campaigns[_id];\\n        emit Cancel(_id);\\n    }\\n\\n    function pledge(uint _id, uint _amount) external {\\n        Campaign storage campaign = campaigns[_id];\\n        require(block.timestamp >= campaign.startAt, \\\"not started\\\");\\n        require(block.timestamp <= campaign.endAt, \\\"ended\\\");\\n\\n        campaign.pledged += _amount;\\n        pledgedAmount[_id][msg.sender] += _amount;\\n        token.transferFrom(msg.sender, address(this), _amount);\\n\\n        emit Pledge(_id, msg.sender, _amount);\\n    }\\n\\n    function unpledge(uint _id, uint _amount) external {\\n        Campaign storage campaign = campaigns[_id];\\n        require(block.timestamp <= campaign.endAt, \\\"ended\\\");\\n\\n        campaign.pledged -= _amount;\\n        pledgedAmount[_id][msg.sender] -= _amount;\\n        token.transfer(msg.sender, _amount);\\n\\n        emit Unpledge(_id, msg.sender, _amount);\\n    }\\n\\n    function claim(uint _id) external {\\n        Campaign storage campaign = campaigns[_id];\\n        require(campaign.creator == msg.sender, \\\"not creator\\\");\\n        require(block.timestamp > campaign.endAt, \\\"not ended\\\");\\n        require(campaign.pledged >= campaign.goal, \\\"pledged < goal\\\");\\n        require(!campaign.claimed, \\\"claimed\\\");\\n\\n        campaign.claimed = true;\\n        token.transfer(campaign.creator, campaign.pledged);\\n\\n        emit Claim(_id);\\n    }\\n\\n    function refund(uint _id) external {\\n        Campaign memory campaign = campaigns[_id];\\n        require(block.timestamp > campaign.endAt, \\\"not ended\\\");\\n        require(campaign.pledged < campaign.goal, \\\"pledged >= goal\\\");\\n\\n        uint bal = pledgedAmount[_id][msg.sender];\\n        pledgedAmount[_id][msg.sender] = 0;\\n        token.transfer(msg.sender, bal);\\n\\n        emit Refund(_id, msg.sender, bal);\\n    }\\n}\",\"keccak256\":\"0x6066dd7c382b2c18d36e4b7ed2fdc698397c081927ad1755016c9adf76c3582e\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MyERC20 is ERC20, ERC20Burnable, Ownable {\\n    constructor() ERC20(\\\"TestToken\\\", \\\"TTK\\\") {\\n        _mint(msg.sender, 10000 * 10 ** decimals());\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x25c6facb248ef355b4355f185acf140c78b6f0b116e3c03f360c334c3c4017a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ee6380380610ee683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610e3f6100a7600039600081816101f20152818161037c015281816107ac01528181610a6d0152610c280152610e3f6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340e58ee51161006657806340e58ee51461019c578063711853ab146101af578063aa4fb63a146101c2578063fc0c546a146101ed578063fde327be1461022c57600080fd5b806306661abd146100a3578063141961bc146100bf578063278ecde1146101615780632c63f14614610176578063379607f514610189575b600080fd5b6100ac60005481565b6040519081526020015b60405180910390f35b61011f6100cd366004610cd2565b600160208190526000918252604090912080549181015460028201546003909201546001600160a01b039093169290919063ffffffff80821691600160201b810490911690600160401b900460ff1686565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff9081166060850152166080830152151560a082015260c0016100b6565b61017461016f366004610cd2565b61023f565b005b610174610184366004610d04565b61042b565b610174610197366004610cd2565b610639565b6101746101aa366004610cd2565b610854565b6101746101bd366004610d40565b6109b3565b6100ac6101d0366004610d62565b600260209081526000928352604080842090915290825290205481565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b6565b61017461023a366004610d40565b610b20565b600081815260016020818152604092839020835160c08101855281546001600160a01b03168152928101549183019190915260028101549282019290925260039091015463ffffffff8082166060840152600160201b82041660808301819052600160401b90910460ff16151560a083015242116102f05760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195b99195960ba1b60448201526064015b60405180910390fd5b80602001518160400151106103395760405162461bcd60e51b815260206004820152600f60248201526e1c1b195919d959080f8f4819dbd85b608a1b60448201526064016102e7565b600082815260026020908152604080832033808552925280832080549390555163a9059cbb60e01b81526004810191909152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610d9e565b50604080518481526020810183905233917f21e12a7cad0da5928167e1084ea4d5fdf8d9af66657a2543a9ac76a0ca08147791015b60405180910390a2505050565b428263ffffffff1610156104725760405162461bcd60e51b815260206004820152600e60248201526d7374617274206174203c206e6f7760901b60448201526064016102e7565b8163ffffffff168163ffffffff1610156104c25760405162461bcd60e51b8152602060048201526011602482015270195b9908185d080f081cdd185c9d08185d607a1b60448201526064016102e7565b6104cf426276a700610ddd565b8163ffffffff16111561051c5760405162461bcd60e51b815260206004820152601560248201527432b7321030ba101f1036b0bc10323ab930ba34b7b760591b60448201526064016102e7565b600160008082825461052e9190610ddd565b90915550506040805160c081018252338082526020808301878152600084860181815263ffffffff89811660608089018281528b84166080808c0182815260a08d0189815289548a526001808d528f8b209e518f546001600160a01b039091166001600160a01b0319909116178f559a519a8e019a909a55965160028d015591516003909b018054965198511515600160401b0260ff60401b19998716600160201b0267ffffffffffffffff199098169c9096169b909b17959095179690961692909217909755915487519081529384018a90529583019490945292810193909352917f0601cd0d650b473037e838a2696d41e654433d065b3f56b28d1d3302e44a304f910161041e565b600081815260016020526040902080546001600160a01b0316331461068e5760405162461bcd60e51b815260206004820152600b60248201526a3737ba1031b932b0ba37b960a91b60448201526064016102e7565b6003810154600160201b900463ffffffff1642116106da5760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195b99195960ba1b60448201526064016102e7565b8060010154816002015410156107235760405162461bcd60e51b815260206004820152600e60248201526d1c1b195919d959080f0819dbd85b60921b60448201526064016102e7565b6003810154600160401b900460ff16156107695760405162461bcd60e51b815260206004820152600760248201526618db185a5b595960ca1b60448201526064016102e7565b60038101805460ff60401b1916600160401b1790558054600282015460405163a9059cbb60e01b81526001600160a01b03928316600482015260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190610d9e565b506040518281527f7bb2b3c10797baccb6f8c4791f1edd6ca2f0d028ee0eda64b01a9a57e3a653f7906020015b60405180910390a15050565b600081815260016020818152604092839020835160c08101855281546001600160a01b0316808252938201549281019290925260028101549382019390935260039092015463ffffffff8082166060850152600160201b8204166080840152600160401b900460ff16151560a083015233146109005760405162461bcd60e51b815260206004820152600b60248201526a3737ba1031b932b0ba37b960a91b60448201526064016102e7565b806060015163ffffffff1642106109435760405162461bcd60e51b81526020600482015260076024820152661cdd185c9d195960ca1b60448201526064016102e7565b600082815260016020819052604080832080546001600160a01b03191681559182018390556002820192909255600301805468ffffffffffffffffff19169055517f8bf30e7ff26833413be5f69e1d373744864d600b664204b4a2f9844a8eedb9ed906108489084815260200190565b60008281526001602052604090206003810154600160201b900463ffffffff16421115610a0a5760405162461bcd60e51b8152602060048201526005602482015264195b99195960da1b60448201526064016102e7565b81816002016000828254610a1e9190610df6565b9091555050600083815260026020908152604080832033845290915281208054849290610a4c908490610df6565b909155505060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190610d9e565b50604051828152339084907f2eeeab891b26a214d1b25749f88a406bdea852bd8c9bfda977e0ef8114c180ba906020015b60405180910390a3505050565b6000828152600160205260409020600381015463ffffffff16421015610b765760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b60448201526064016102e7565b6003810154600160201b900463ffffffff16421115610bbf5760405162461bcd60e51b8152602060048201526005602482015264195b99195960da1b60448201526064016102e7565b81816002016000828254610bd39190610ddd565b9091555050600083815260026020908152604080832033845290915281208054849290610c01908490610ddd565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190610d9e565b50604051828152339084907f06bdb975df800a73232998e71ed585d536222f1dfeaa622d7f62a23ada686c8290602001610b13565b600060208284031215610ce457600080fd5b5035919050565b803563ffffffff81168114610cff57600080fd5b919050565b600080600060608486031215610d1957600080fd5b83359250610d2960208501610ceb565b9150610d3760408501610ceb565b90509250925092565b60008060408385031215610d5357600080fd5b50508035926020909101359150565b60008060408385031215610d7557600080fd5b8235915060208301356001600160a01b0381168114610d9357600080fd5b809150509250929050565b600060208284031215610db057600080fd5b81518015158114610dc057600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610df057610df0610dc7565b92915050565b81810381811115610df057610df0610dc756fea264697066735822122069d3c8596def82f7dcea3f2b1a1559f29f91e1093c66409152b8e8f8135109c764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806340e58ee51161006657806340e58ee51461019c578063711853ab146101af578063aa4fb63a146101c2578063fc0c546a146101ed578063fde327be1461022c57600080fd5b806306661abd146100a3578063141961bc146100bf578063278ecde1146101615780632c63f14614610176578063379607f514610189575b600080fd5b6100ac60005481565b6040519081526020015b60405180910390f35b61011f6100cd366004610cd2565b600160208190526000918252604090912080549181015460028201546003909201546001600160a01b039093169290919063ffffffff80821691600160201b810490911690600160401b900460ff1686565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff9081166060850152166080830152151560a082015260c0016100b6565b61017461016f366004610cd2565b61023f565b005b610174610184366004610d04565b61042b565b610174610197366004610cd2565b610639565b6101746101aa366004610cd2565b610854565b6101746101bd366004610d40565b6109b3565b6100ac6101d0366004610d62565b600260209081526000928352604080842090915290825290205481565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b6565b61017461023a366004610d40565b610b20565b600081815260016020818152604092839020835160c08101855281546001600160a01b03168152928101549183019190915260028101549282019290925260039091015463ffffffff8082166060840152600160201b82041660808301819052600160401b90910460ff16151560a083015242116102f05760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195b99195960ba1b60448201526064015b60405180910390fd5b80602001518160400151106103395760405162461bcd60e51b815260206004820152600f60248201526e1c1b195919d959080f8f4819dbd85b608a1b60448201526064016102e7565b600082815260026020908152604080832033808552925280832080549390555163a9059cbb60e01b81526004810191909152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610d9e565b50604080518481526020810183905233917f21e12a7cad0da5928167e1084ea4d5fdf8d9af66657a2543a9ac76a0ca08147791015b60405180910390a2505050565b428263ffffffff1610156104725760405162461bcd60e51b815260206004820152600e60248201526d7374617274206174203c206e6f7760901b60448201526064016102e7565b8163ffffffff168163ffffffff1610156104c25760405162461bcd60e51b8152602060048201526011602482015270195b9908185d080f081cdd185c9d08185d607a1b60448201526064016102e7565b6104cf426276a700610ddd565b8163ffffffff16111561051c5760405162461bcd60e51b815260206004820152601560248201527432b7321030ba101f1036b0bc10323ab930ba34b7b760591b60448201526064016102e7565b600160008082825461052e9190610ddd565b90915550506040805160c081018252338082526020808301878152600084860181815263ffffffff89811660608089018281528b84166080808c0182815260a08d0189815289548a526001808d528f8b209e518f546001600160a01b039091166001600160a01b0319909116178f559a519a8e019a909a55965160028d015591516003909b018054965198511515600160401b0260ff60401b19998716600160201b0267ffffffffffffffff199098169c9096169b909b17959095179690961692909217909755915487519081529384018a90529583019490945292810193909352917f0601cd0d650b473037e838a2696d41e654433d065b3f56b28d1d3302e44a304f910161041e565b600081815260016020526040902080546001600160a01b0316331461068e5760405162461bcd60e51b815260206004820152600b60248201526a3737ba1031b932b0ba37b960a91b60448201526064016102e7565b6003810154600160201b900463ffffffff1642116106da5760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195b99195960ba1b60448201526064016102e7565b8060010154816002015410156107235760405162461bcd60e51b815260206004820152600e60248201526d1c1b195919d959080f0819dbd85b60921b60448201526064016102e7565b6003810154600160401b900460ff16156107695760405162461bcd60e51b815260206004820152600760248201526618db185a5b595960ca1b60448201526064016102e7565b60038101805460ff60401b1916600160401b1790558054600282015460405163a9059cbb60e01b81526001600160a01b03928316600482015260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190610d9e565b506040518281527f7bb2b3c10797baccb6f8c4791f1edd6ca2f0d028ee0eda64b01a9a57e3a653f7906020015b60405180910390a15050565b600081815260016020818152604092839020835160c08101855281546001600160a01b0316808252938201549281019290925260028101549382019390935260039092015463ffffffff8082166060850152600160201b8204166080840152600160401b900460ff16151560a083015233146109005760405162461bcd60e51b815260206004820152600b60248201526a3737ba1031b932b0ba37b960a91b60448201526064016102e7565b806060015163ffffffff1642106109435760405162461bcd60e51b81526020600482015260076024820152661cdd185c9d195960ca1b60448201526064016102e7565b600082815260016020819052604080832080546001600160a01b03191681559182018390556002820192909255600301805468ffffffffffffffffff19169055517f8bf30e7ff26833413be5f69e1d373744864d600b664204b4a2f9844a8eedb9ed906108489084815260200190565b60008281526001602052604090206003810154600160201b900463ffffffff16421115610a0a5760405162461bcd60e51b8152602060048201526005602482015264195b99195960da1b60448201526064016102e7565b81816002016000828254610a1e9190610df6565b9091555050600083815260026020908152604080832033845290915281208054849290610a4c908490610df6565b909155505060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190610d9e565b50604051828152339084907f2eeeab891b26a214d1b25749f88a406bdea852bd8c9bfda977e0ef8114c180ba906020015b60405180910390a3505050565b6000828152600160205260409020600381015463ffffffff16421015610b765760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b60448201526064016102e7565b6003810154600160201b900463ffffffff16421115610bbf5760405162461bcd60e51b8152602060048201526005602482015264195b99195960da1b60448201526064016102e7565b81816002016000828254610bd39190610ddd565b9091555050600083815260026020908152604080832033845290915281208054849290610c01908490610ddd565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190610d9e565b50604051828152339084907f06bdb975df800a73232998e71ed585d536222f1dfeaa622d7f62a23ada686c8290602001610b13565b600060208284031215610ce457600080fd5b5035919050565b803563ffffffff81168114610cff57600080fd5b919050565b600080600060608486031215610d1957600080fd5b83359250610d2960208501610ceb565b9150610d3760408501610ceb565b90509250925092565b60008060408385031215610d5357600080fd5b50508035926020909101359150565b60008060408385031215610d7557600080fd5b8235915060208301356001600160a01b0381168114610d9357600080fd5b809150509250929050565b600060208284031215610db057600080fd5b81518015158114610dc057600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610df057610df0610dc7565b92915050565b81810381811115610df057610df0610dc756fea264697066735822122069d3c8596def82f7dcea3f2b1a1559f29f91e1093c66409152b8e8f8135109c764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12021,
        "contract": "contracts/CrowdFund.sol:CrowdSale",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12026,
        "contract": "contracts/CrowdFund.sol:CrowdSale",
        "label": "campaigns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Campaign)12016_storage)"
      },
      {
        "astId": 12032,
        "contract": "contracts/CrowdFund.sol:CrowdSale",
        "label": "pledgedAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Campaign)12016_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CrowdSale.Campaign)",
        "numberOfBytes": "32",
        "value": "t_struct(Campaign)12016_storage"
      },
      "t_struct(Campaign)12016_storage": {
        "encoding": "inplace",
        "label": "struct CrowdSale.Campaign",
        "members": [
          {
            "astId": 12005,
            "contract": "contracts/CrowdFund.sol:CrowdSale",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12007,
            "contract": "contracts/CrowdFund.sol:CrowdSale",
            "label": "goal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12009,
            "contract": "contracts/CrowdFund.sol:CrowdSale",
            "label": "pledged",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12011,
            "contract": "contracts/CrowdFund.sol:CrowdSale",
            "label": "startAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 12013,
            "contract": "contracts/CrowdFund.sol:CrowdSale",
            "label": "endAt",
            "offset": 4,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 12015,
            "contract": "contracts/CrowdFund.sol:CrowdSale",
            "label": "claimed",
            "offset": 8,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}